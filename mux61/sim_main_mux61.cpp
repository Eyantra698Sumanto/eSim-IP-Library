/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vmux61.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_a[1024];
        extern "C" int port_a;
        extern "C" int temp_b[1024];
        extern "C" int port_b;
        extern "C" int temp_c[1024];
        extern "C" int port_c;
        extern "C" int temp_d[1024];
        extern "C" int port_d;
        extern "C" int temp_s0[1024];
        extern "C" int port_s0;
        extern "C" int temp_s1[1024];
        extern "C" int port_s1;
        extern "C" int temp_out[1024];
        extern "C" int port_out;
        extern "C" int foomux61(int,int);
        
        void int2arrmux61(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intmux61(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int foomux61(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vmux61* mux61[1024];
            count--;
            if (init==0)
            {
                mux61[count]=new Vmux61{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============mux61 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("a=%d\n", mux61[count] ->a);
				printf("b=%d\n", mux61[count] ->b);
				printf("c=%d\n", mux61[count] ->c);
				printf("d=%d\n", mux61[count] ->d);
				printf("s0=%d\n", mux61[count] ->s0);
				printf("s1=%d\n", mux61[count] ->s1);
				printf("out=%d\n", mux61[count] ->out);
				mux61[count]->a = arr2intmux61(temp_a, port_a);
				mux61[count]->b = arr2intmux61(temp_b, port_b);
				mux61[count]->c = arr2intmux61(temp_c, port_c);
				mux61[count]->d = arr2intmux61(temp_d, port_d);
				mux61[count]->s0 = arr2intmux61(temp_s0, port_s0);
				mux61[count]->s1 = arr2intmux61(temp_s1, port_s1);
				mux61[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("a=%d\n", mux61[count] ->a);
				printf("b=%d\n", mux61[count] ->b);
				printf("c=%d\n", mux61[count] ->c);
				printf("d=%d\n", mux61[count] ->d);
				printf("s0=%d\n", mux61[count] ->s0);
				printf("s1=%d\n", mux61[count] ->s1);
				printf("out=%d\n", mux61[count] ->out);
				int2arrmux61(mux61[count] -> out, temp_out, port_out);

            }
            return 0;
        }