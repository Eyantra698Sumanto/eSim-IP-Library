/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vjkff32.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_j[1024];
        extern "C" int port_j;
        extern "C" int temp_k[1024];
        extern "C" int port_k;
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_q[1024];
        extern "C" int port_q;
        extern "C" int temp_qb[1024];
        extern "C" int port_qb;
        extern "C" int foojkff32(int,int);
        
        void int2arrjkff32(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intjkff32(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int foojkff32(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vjkff32* jkff32[1024];
            count--;
            if (init==0)
            {
                jkff32[count]=new Vjkff32{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============jkff32 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("j=%d\n", jkff32[count] ->j);
				printf("k=%d\n", jkff32[count] ->k);
				printf("clk=%d\n", jkff32[count] ->clk);
				printf("q=%d\n", jkff32[count] ->q);
				printf("qb=%d\n", jkff32[count] ->qb);
				jkff32[count]->j = arr2intjkff32(temp_j, port_j);
				jkff32[count]->k = arr2intjkff32(temp_k, port_k);
				jkff32[count]->clk = arr2intjkff32(temp_clk, port_clk);
				jkff32[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("j=%d\n", jkff32[count] ->j);
				printf("k=%d\n", jkff32[count] ->k);
				printf("clk=%d\n", jkff32[count] ->clk);
				printf("q=%d\n", jkff32[count] ->q);
				printf("qb=%d\n", jkff32[count] ->qb);
				int2arrjkff32(jkff32[count] -> q, temp_q, port_q);
				int2arrjkff32(jkff32[count] -> qb, temp_qb, port_qb);

            }
            return 0;
        }