/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_eleasm63.h"

        
void cm_eleasm63(ARGS) 
{
	Digital_State_t *_op_floor, *_op_floor_old;
	Digital_State_t *_op_dir, *_op_dir_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {
        inst_count++;
        PARAM(instance_id)=inst_count;
        fooeleasm63(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clk=PORT_SIZE(clk);

        port_rst=PORT_SIZE(rst);

        port_ra=PORT_SIZE(ra);

        port_rb=PORT_SIZE(rb);

        port_rc=PORT_SIZE(rc);

        port_rd=PORT_SIZE(rd);

        port_floor=PORT_SIZE(floor);

        port_dir=PORT_SIZE(dir);
		cm_event_alloc(0,2*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
		{
			LOAD(clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rst);Ii++)
		{
			LOAD(rst[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(ra);Ii++)
		{
			LOAD(ra[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rb);Ii++)
		{
			LOAD(rb[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rc);Ii++)
		{
			LOAD(rc[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rd);Ii++)
		{
			LOAD(rd[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_floor = _op_floor_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_dir = _op_dir_old = (Digital_State_t *) cm_event_get_ptr(1,0);


	}
	else
	{
		_op_floor = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_floor_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_dir = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_dir_old = (Digital_State_t *) cm_event_get_ptr(1,2);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
    {
        if( INPUT_STATE(clk[Ii])==ZERO )
        {
            temp_clk[Ii]=0;            }
        else
        {
            temp_clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rst);Ii++)
    {
        if( INPUT_STATE(rst[Ii])==ZERO )
        {
            temp_rst[Ii]=0;            }
        else
        {
            temp_rst[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(ra);Ii++)
    {
        if( INPUT_STATE(ra[Ii])==ZERO )
        {
            temp_ra[Ii]=0;            }
        else
        {
            temp_ra[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rb);Ii++)
    {
        if( INPUT_STATE(rb[Ii])==ZERO )
        {
            temp_rb[Ii]=0;            }
        else
        {
            temp_rb[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rc);Ii++)
    {
        if( INPUT_STATE(rc[Ii])==ZERO )
        {
            temp_rc[Ii]=0;            }
        else
        {
            temp_rc[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rd);Ii++)
    {
        if( INPUT_STATE(rd[Ii])==ZERO )
        {
            temp_rd[Ii]=0;            }
        else
        {
            temp_rd[Ii]=1;
        }
            }
	fooeleasm63(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(floor);Ii++)
    {
        if(temp_floor[Ii]==0)
        {
            _op_floor[Ii]=ZERO;
            }
        else if(temp_floor[Ii]==1)
        {
            _op_floor[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(floor[Ii]) = _op_floor[Ii];
            }
        else if(_op_floor[Ii] != _op_floor_old[Ii])
        {
            OUTPUT_STATE(floor[Ii]) = _op_floor[Ii];
            OUTPUT_DELAY(floor[Ii]) = ((_op_floor[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(floor[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(floor[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(dir);Ii++)
    {
        if(temp_dir[Ii]==0)
        {
            _op_dir[Ii]=ZERO;
            }
        else if(temp_dir[Ii]==1)
        {
            _op_dir[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(dir[Ii]) = _op_dir[Ii];
            }
        else if(_op_dir[Ii] != _op_dir_old[Ii])
        {
            OUTPUT_STATE(dir[Ii]) = _op_dir[Ii];
            OUTPUT_DELAY(dir[Ii]) = ((_op_dir[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(dir[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(dir[Ii]) = STRONG;
    }

}