/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Veleasm63.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_rst[1024];
        extern "C" int port_rst;
        extern "C" int temp_ra[1024];
        extern "C" int port_ra;
        extern "C" int temp_rb[1024];
        extern "C" int port_rb;
        extern "C" int temp_rc[1024];
        extern "C" int port_rc;
        extern "C" int temp_rd[1024];
        extern "C" int port_rd;
        extern "C" int temp_floor[1024];
        extern "C" int port_floor;
        extern "C" int temp_dir[1024];
        extern "C" int port_dir;
        extern "C" int fooeleasm63(int,int);
        
        void int2arreleasm63(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2inteleasm63(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int fooeleasm63(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Veleasm63* eleasm63[1024];
            count--;
            if (init==0)
            {
                eleasm63[count]=new Veleasm63{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============eleasm63 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk=%d\n", eleasm63[count] ->clk);
				printf("rst=%d\n", eleasm63[count] ->rst);
				printf("ra=%d\n", eleasm63[count] ->ra);
				printf("rb=%d\n", eleasm63[count] ->rb);
				printf("rc=%d\n", eleasm63[count] ->rc);
				printf("rd=%d\n", eleasm63[count] ->rd);
				printf("floor=%d\n", eleasm63[count] ->floor);
				printf("dir=%d\n", eleasm63[count] ->dir);
				eleasm63[count]->clk = arr2inteleasm63(temp_clk, port_clk);
				eleasm63[count]->rst = arr2inteleasm63(temp_rst, port_rst);
				eleasm63[count]->ra = arr2inteleasm63(temp_ra, port_ra);
				eleasm63[count]->rb = arr2inteleasm63(temp_rb, port_rb);
				eleasm63[count]->rc = arr2inteleasm63(temp_rc, port_rc);
				eleasm63[count]->rd = arr2inteleasm63(temp_rd, port_rd);
				eleasm63[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk=%d\n", eleasm63[count] ->clk);
				printf("rst=%d\n", eleasm63[count] ->rst);
				printf("ra=%d\n", eleasm63[count] ->ra);
				printf("rb=%d\n", eleasm63[count] ->rb);
				printf("rc=%d\n", eleasm63[count] ->rc);
				printf("rd=%d\n", eleasm63[count] ->rd);
				printf("floor=%d\n", eleasm63[count] ->floor);
				printf("dir=%d\n", eleasm63[count] ->dir);
				int2arreleasm63(eleasm63[count] -> floor, temp_floor, port_floor);
				int2arreleasm63(eleasm63[count] -> dir, temp_dir, port_dir);

            }
            return 0;
        }