/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_claadd95.h"

        
void cm_claadd95(ARGS) 
{
	Digital_State_t *_op_sum, *_op_sum_old;
	Digital_State_t *_op_c_out, *_op_c_out_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {
        inst_count++;
        PARAM(instance_id)=inst_count;
        fooclaadd95(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_a=PORT_SIZE(a);

        port_b=PORT_SIZE(b);

        port_c_in=PORT_SIZE(c_in);

        port_sum=PORT_SIZE(sum);

        port_c_out=PORT_SIZE(c_out);
		cm_event_alloc(0,4*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(a);Ii++)
		{
			LOAD(a[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(b);Ii++)
		{
			LOAD(b[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(c_in);Ii++)
		{
			LOAD(c_in[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_sum = _op_sum_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_c_out = _op_c_out_old = (Digital_State_t *) cm_event_get_ptr(1,0);


	}
	else
	{
		_op_sum = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_sum_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_c_out = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_c_out_old = (Digital_State_t *) cm_event_get_ptr(1,2);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(a);Ii++)
    {
        if( INPUT_STATE(a[Ii])==ZERO )
        {
            temp_a[Ii]=0;            }
        else
        {
            temp_a[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(b);Ii++)
    {
        if( INPUT_STATE(b[Ii])==ZERO )
        {
            temp_b[Ii]=0;            }
        else
        {
            temp_b[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(c_in);Ii++)
    {
        if( INPUT_STATE(c_in[Ii])==ZERO )
        {
            temp_c_in[Ii]=0;            }
        else
        {
            temp_c_in[Ii]=1;
        }
            }
	fooclaadd95(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(sum);Ii++)
    {
        if(temp_sum[Ii]==0)
        {
            _op_sum[Ii]=ZERO;
            }
        else if(temp_sum[Ii]==1)
        {
            _op_sum[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(sum[Ii]) = _op_sum[Ii];
            }
        else if(_op_sum[Ii] != _op_sum_old[Ii])
        {
            OUTPUT_STATE(sum[Ii]) = _op_sum[Ii];
            OUTPUT_DELAY(sum[Ii]) = ((_op_sum[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(sum[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(sum[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(c_out);Ii++)
    {
        if(temp_c_out[Ii]==0)
        {
            _op_c_out[Ii]=ZERO;
            }
        else if(temp_c_out[Ii]==1)
        {
            _op_c_out[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(c_out[Ii]) = _op_c_out[Ii];
            }
        else if(_op_c_out[Ii] != _op_c_out_old[Ii])
        {
            OUTPUT_STATE(c_out[Ii]) = _op_c_out[Ii];
            OUTPUT_DELAY(c_out[Ii]) = ((_op_c_out[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(c_out[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(c_out[Ii]) = STRONG;
    }

}