/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vclaadd95.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_a[1024];
        extern "C" int port_a;
        extern "C" int temp_b[1024];
        extern "C" int port_b;
        extern "C" int temp_c_in[1024];
        extern "C" int port_c_in;
        extern "C" int temp_sum[1024];
        extern "C" int port_sum;
        extern "C" int temp_c_out[1024];
        extern "C" int port_c_out;
        extern "C" int fooclaadd95(int,int);
        
        void int2arrclaadd95(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intclaadd95(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int fooclaadd95(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vclaadd95* claadd95[1024];
            count--;
            if (init==0)
            {
                claadd95[count]=new Vclaadd95{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============claadd95 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("a=%d\n", claadd95[count] ->a);
				printf("b=%d\n", claadd95[count] ->b);
				printf("c_in=%d\n", claadd95[count] ->c_in);
				printf("sum=%d\n", claadd95[count] ->sum);
				printf("c_out=%d\n", claadd95[count] ->c_out);
				claadd95[count]->a = arr2intclaadd95(temp_a, port_a);
				claadd95[count]->b = arr2intclaadd95(temp_b, port_b);
				claadd95[count]->c_in = arr2intclaadd95(temp_c_in, port_c_in);
				claadd95[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("a=%d\n", claadd95[count] ->a);
				printf("b=%d\n", claadd95[count] ->b);
				printf("c_in=%d\n", claadd95[count] ->c_in);
				printf("sum=%d\n", claadd95[count] ->sum);
				printf("c_out=%d\n", claadd95[count] ->c_out);
				int2arrclaadd95(claadd95[count] -> sum, temp_sum, port_sum);
				int2arrclaadd95(claadd95[count] -> c_out, temp_c_out, port_c_out);

            }
            return 0;
        }