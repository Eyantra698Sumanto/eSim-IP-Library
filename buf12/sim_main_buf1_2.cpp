/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vbuf1_2.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_a[1024];
        extern "C" int port_a;
        extern "C" int temp_y[1024];
        extern "C" int port_y;
        extern "C" int temp_ybar[1024];
        extern "C" int port_ybar;
        extern "C" int foobuf1_2(int,int);
        
        void int2arrbuf1_2(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intbuf1_2(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int foobuf1_2(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vbuf1_2* buf1_2[1024];
            count--;
            if (init==0)
            {
                buf1_2[count]=new Vbuf1_2{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============buf1_2 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("a=%d\n", buf1_2[count] ->a);
				printf("y=%d\n", buf1_2[count] ->y);
				printf("ybar=%d\n", buf1_2[count] ->ybar);
				buf1_2[count]->a = arr2intbuf1_2(temp_a, port_a);
				buf1_2[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("a=%d\n", buf1_2[count] ->a);
				printf("y=%d\n", buf1_2[count] ->y);
				printf("ybar=%d\n", buf1_2[count] ->ybar);
				int2arrbuf1_2(buf1_2[count] -> y, temp_y, port_y);
				int2arrbuf1_2(buf1_2[count] -> ybar, temp_ybar, port_ybar);

            }
            return 0;
        }