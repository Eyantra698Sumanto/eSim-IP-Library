/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_dff32.h"

        
void cm_dff32(ARGS) 
{
	Digital_State_t *_op_Q, *_op_Q_old;
	Digital_State_t *_op_Qbar, *_op_Qbar_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {
        inst_count++;
        PARAM(instance_id)=inst_count;
        foodff32(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_D=PORT_SIZE(D);

        port_Clk=PORT_SIZE(Clk);

        port_Reset=PORT_SIZE(Reset);

        port_Q=PORT_SIZE(Q);

        port_Qbar=PORT_SIZE(Qbar);
		cm_event_alloc(0,1*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(D);Ii++)
		{
			LOAD(D[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(Clk);Ii++)
		{
			LOAD(Clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(Reset);Ii++)
		{
			LOAD(Reset[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_Q = _op_Q_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_Qbar = _op_Qbar_old = (Digital_State_t *) cm_event_get_ptr(1,0);


	}
	else
	{
		_op_Q = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_Q_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_Qbar = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_Qbar_old = (Digital_State_t *) cm_event_get_ptr(1,2);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(D);Ii++)
    {
        if( INPUT_STATE(D[Ii])==ZERO )
        {
            temp_D[Ii]=0;            }
        else
        {
            temp_D[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(Clk);Ii++)
    {
        if( INPUT_STATE(Clk[Ii])==ZERO )
        {
            temp_Clk[Ii]=0;            }
        else
        {
            temp_Clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(Reset);Ii++)
    {
        if( INPUT_STATE(Reset[Ii])==ZERO )
        {
            temp_Reset[Ii]=0;            }
        else
        {
            temp_Reset[Ii]=1;
        }
            }
	foodff32(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(Q);Ii++)
    {
        if(temp_Q[Ii]==0)
        {
            _op_Q[Ii]=ZERO;
            }
        else if(temp_Q[Ii]==1)
        {
            _op_Q[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(Q[Ii]) = _op_Q[Ii];
            }
        else if(_op_Q[Ii] != _op_Q_old[Ii])
        {
            OUTPUT_STATE(Q[Ii]) = _op_Q[Ii];
            OUTPUT_DELAY(Q[Ii]) = ((_op_Q[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(Q[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(Q[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(Qbar);Ii++)
    {
        if(temp_Qbar[Ii]==0)
        {
            _op_Qbar[Ii]=ZERO;
            }
        else if(temp_Qbar[Ii]==1)
        {
            _op_Qbar[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(Qbar[Ii]) = _op_Qbar[Ii];
            }
        else if(_op_Qbar[Ii] != _op_Qbar_old[Ii])
        {
            OUTPUT_STATE(Qbar[Ii]) = _op_Qbar[Ii];
            OUTPUT_DELAY(Qbar[Ii]) = ((_op_Qbar[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(Qbar[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(Qbar[Ii]) = STRONG;
    }

}