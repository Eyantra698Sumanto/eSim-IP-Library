/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_trafficlight2_12.h"

        
void cm_trafficlight2_12(ARGS) 
{
	Digital_State_t *_op_light_S1, *_op_light_S1_old;
	Digital_State_t *_op_light_S2, *_op_light_S2_old;
	Digital_State_t *_op_light_S3, *_op_light_S3_old;
	Digital_State_t *_op_light_S4, *_op_light_S4_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {
        inst_count++;
        PARAM(instance_id)=inst_count;
        footrafficlight2_12(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clk=PORT_SIZE(clk);

        port_rst=PORT_SIZE(rst);

        port_light_S1=PORT_SIZE(light_S1);

        port_light_S2=PORT_SIZE(light_S2);

        port_light_S3=PORT_SIZE(light_S3);

        port_light_S4=PORT_SIZE(light_S4);
		cm_event_alloc(0,3*sizeof(Digital_State_t));
		cm_event_alloc(1,3*sizeof(Digital_State_t));
		cm_event_alloc(2,3*sizeof(Digital_State_t));
		cm_event_alloc(3,3*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
		{
			LOAD(clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rst);Ii++)
		{
			LOAD(rst[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_light_S1 = _op_light_S1_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_light_S2 = _op_light_S2_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_light_S3 = _op_light_S3_old = (Digital_State_t *) cm_event_get_ptr(2,0);
		_op_light_S4 = _op_light_S4_old = (Digital_State_t *) cm_event_get_ptr(3,0);


	}
	else
	{
		_op_light_S1 = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_light_S1_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_light_S2 = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_light_S2_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_light_S3 = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_light_S3_old = (Digital_State_t *) cm_event_get_ptr(2,3);
		_op_light_S4 = (Digital_State_t *) cm_event_get_ptr(3,3);
		_op_light_S4_old = (Digital_State_t *) cm_event_get_ptr(3,4);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
    {
        if( INPUT_STATE(clk[Ii])==ZERO )
        {
            temp_clk[Ii]=0;            }
        else
        {
            temp_clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rst);Ii++)
    {
        if( INPUT_STATE(rst[Ii])==ZERO )
        {
            temp_rst[Ii]=0;            }
        else
        {
            temp_rst[Ii]=1;
        }
            }
	footrafficlight2_12(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(light_S1);Ii++)
    {
        if(temp_light_S1[Ii]==0)
        {
            _op_light_S1[Ii]=ZERO;
            }
        else if(temp_light_S1[Ii]==1)
        {
            _op_light_S1[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(light_S1[Ii]) = _op_light_S1[Ii];
            }
        else if(_op_light_S1[Ii] != _op_light_S1_old[Ii])
        {
            OUTPUT_STATE(light_S1[Ii]) = _op_light_S1[Ii];
            OUTPUT_DELAY(light_S1[Ii]) = ((_op_light_S1[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(light_S1[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(light_S1[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(light_S2);Ii++)
    {
        if(temp_light_S2[Ii]==0)
        {
            _op_light_S2[Ii]=ZERO;
            }
        else if(temp_light_S2[Ii]==1)
        {
            _op_light_S2[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(light_S2[Ii]) = _op_light_S2[Ii];
            }
        else if(_op_light_S2[Ii] != _op_light_S2_old[Ii])
        {
            OUTPUT_STATE(light_S2[Ii]) = _op_light_S2[Ii];
            OUTPUT_DELAY(light_S2[Ii]) = ((_op_light_S2[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(light_S2[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(light_S2[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(light_S3);Ii++)
    {
        if(temp_light_S3[Ii]==0)
        {
            _op_light_S3[Ii]=ZERO;
            }
        else if(temp_light_S3[Ii]==1)
        {
            _op_light_S3[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(light_S3[Ii]) = _op_light_S3[Ii];
            }
        else if(_op_light_S3[Ii] != _op_light_S3_old[Ii])
        {
            OUTPUT_STATE(light_S3[Ii]) = _op_light_S3[Ii];
            OUTPUT_DELAY(light_S3[Ii]) = ((_op_light_S3[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(light_S3[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(light_S3[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(light_S4);Ii++)
    {
        if(temp_light_S4[Ii]==0)
        {
            _op_light_S4[Ii]=ZERO;
            }
        else if(temp_light_S4[Ii]==1)
        {
            _op_light_S4[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(light_S4[Ii]) = _op_light_S4[Ii];
            }
        else if(_op_light_S4[Ii] != _op_light_S4_old[Ii])
        {
            OUTPUT_STATE(light_S4[Ii]) = _op_light_S4[Ii];
            OUTPUT_DELAY(light_S4[Ii]) = ((_op_light_S4[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(light_S4[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(light_S4[Ii]) = STRONG;
    }

}