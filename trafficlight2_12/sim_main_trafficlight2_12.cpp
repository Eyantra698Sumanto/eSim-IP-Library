/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vtrafficlight2_12.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_rst[1024];
        extern "C" int port_rst;
        extern "C" int temp_light_S1[1024];
        extern "C" int port_light_S1;
        extern "C" int temp_light_S2[1024];
        extern "C" int port_light_S2;
        extern "C" int temp_light_S3[1024];
        extern "C" int port_light_S3;
        extern "C" int temp_light_S4[1024];
        extern "C" int port_light_S4;
        extern "C" int footrafficlight2_12(int,int);
        
        void int2arrtrafficlight2_12(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2inttrafficlight2_12(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int footrafficlight2_12(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vtrafficlight2_12* trafficlight2_12[1024];
            count--;
            if (init==0)
            {
                trafficlight2_12[count]=new Vtrafficlight2_12{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============trafficlight2_12 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk=%d\n", trafficlight2_12[count] ->clk);
				printf("rst=%d\n", trafficlight2_12[count] ->rst);
				printf("light_S1=%d\n", trafficlight2_12[count] ->light_S1);
				printf("light_S2=%d\n", trafficlight2_12[count] ->light_S2);
				printf("light_S3=%d\n", trafficlight2_12[count] ->light_S3);
				printf("light_S4=%d\n", trafficlight2_12[count] ->light_S4);
				trafficlight2_12[count]->clk = arr2inttrafficlight2_12(temp_clk, port_clk);
				trafficlight2_12[count]->rst = arr2inttrafficlight2_12(temp_rst, port_rst);
				trafficlight2_12[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk=%d\n", trafficlight2_12[count] ->clk);
				printf("rst=%d\n", trafficlight2_12[count] ->rst);
				printf("light_S1=%d\n", trafficlight2_12[count] ->light_S1);
				printf("light_S2=%d\n", trafficlight2_12[count] ->light_S2);
				printf("light_S3=%d\n", trafficlight2_12[count] ->light_S3);
				printf("light_S4=%d\n", trafficlight2_12[count] ->light_S4);
				int2arrtrafficlight2_12(trafficlight2_12[count] -> light_S1, temp_light_S1, port_light_S1);
				int2arrtrafficlight2_12(trafficlight2_12[count] -> light_S2, temp_light_S2, port_light_S2);
				int2arrtrafficlight2_12(trafficlight2_12[count] -> light_S3, temp_light_S3, port_light_S3);
				int2arrtrafficlight2_12(trafficlight2_12[count] -> light_S4, temp_light_S4, port_light_S4);

            }
            return 0;
        }