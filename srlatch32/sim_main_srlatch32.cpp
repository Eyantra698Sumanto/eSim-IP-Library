/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vsrlatch32.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_CLK[1024];
        extern "C" int port_CLK;
        extern "C" int temp_S[1024];
        extern "C" int port_S;
        extern "C" int temp_R[1024];
        extern "C" int port_R;
        extern "C" int temp_Q[1024];
        extern "C" int port_Q;
        extern "C" int temp_Qn[1024];
        extern "C" int port_Qn;
        extern "C" int foosrlatch32(int,int);
        
        void int2arrsrlatch32(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intsrlatch32(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int foosrlatch32(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vsrlatch32* srlatch32[1024];
            count--;
            if (init==0)
            {
                srlatch32[count]=new Vsrlatch32{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============srlatch32 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("CLK=%d\n", srlatch32[count] ->CLK);
				printf("S=%d\n", srlatch32[count] ->S);
				printf("R=%d\n", srlatch32[count] ->R);
				printf("Q=%d\n", srlatch32[count] ->Q);
				printf("Qn=%d\n", srlatch32[count] ->Qn);
				srlatch32[count]->CLK = arr2intsrlatch32(temp_CLK, port_CLK);
				srlatch32[count]->S = arr2intsrlatch32(temp_S, port_S);
				srlatch32[count]->R = arr2intsrlatch32(temp_R, port_R);
				srlatch32[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("CLK=%d\n", srlatch32[count] ->CLK);
				printf("S=%d\n", srlatch32[count] ->S);
				printf("R=%d\n", srlatch32[count] ->R);
				printf("Q=%d\n", srlatch32[count] ->Q);
				printf("Qn=%d\n", srlatch32[count] ->Qn);
				int2arrsrlatch32(srlatch32[count] -> Q, temp_Q, port_Q);
				int2arrsrlatch32(srlatch32[count] -> Qn, temp_Qn, port_Qn);

            }
            return 0;
        }