/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_rfasic43_9.h"

        
void cm_rfasic43_9(ARGS) 
{
	Digital_State_t *_op_out_Light, *_op_out_Light_old;
	Digital_State_t *_op_out_Tx_Serial, *_op_out_Tx_Serial_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {
        inst_count++;
        PARAM(instance_id)=inst_count;
        foorfasic43_9(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_in_Sensor1=PORT_SIZE(in_Sensor1);

        port_in_Sensor2=PORT_SIZE(in_Sensor2);

        port_in_Sensor3=PORT_SIZE(in_Sensor3);

        port_in_Sensor4=PORT_SIZE(in_Sensor4);

        port_in_Sensor5=PORT_SIZE(in_Sensor5);

        port_in_Global_Clock=PORT_SIZE(in_Global_Clock);

        port_in_Clk=PORT_SIZE(in_Clk);

        port_in_RST=PORT_SIZE(in_RST);

        port_out_Light=PORT_SIZE(out_Light);

        port_out_Tx_Serial=PORT_SIZE(out_Tx_Serial);
		cm_event_alloc(0,8*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(in_Sensor1);Ii++)
		{
			LOAD(in_Sensor1[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(in_Sensor2);Ii++)
		{
			LOAD(in_Sensor2[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(in_Sensor3);Ii++)
		{
			LOAD(in_Sensor3[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(in_Sensor4);Ii++)
		{
			LOAD(in_Sensor4[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(in_Sensor5);Ii++)
		{
			LOAD(in_Sensor5[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(in_Global_Clock);Ii++)
		{
			LOAD(in_Global_Clock[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(in_Clk);Ii++)
		{
			LOAD(in_Clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(in_RST);Ii++)
		{
			LOAD(in_RST[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_out_Light = _op_out_Light_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_out_Tx_Serial = _op_out_Tx_Serial_old = (Digital_State_t *) cm_event_get_ptr(1,0);


	}
	else
	{
		_op_out_Light = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_out_Light_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_out_Tx_Serial = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_out_Tx_Serial_old = (Digital_State_t *) cm_event_get_ptr(1,2);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(in_Sensor1);Ii++)
    {
        if( INPUT_STATE(in_Sensor1[Ii])==ZERO )
        {
            temp_in_Sensor1[Ii]=0;            }
        else
        {
            temp_in_Sensor1[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(in_Sensor2);Ii++)
    {
        if( INPUT_STATE(in_Sensor2[Ii])==ZERO )
        {
            temp_in_Sensor2[Ii]=0;            }
        else
        {
            temp_in_Sensor2[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(in_Sensor3);Ii++)
    {
        if( INPUT_STATE(in_Sensor3[Ii])==ZERO )
        {
            temp_in_Sensor3[Ii]=0;            }
        else
        {
            temp_in_Sensor3[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(in_Sensor4);Ii++)
    {
        if( INPUT_STATE(in_Sensor4[Ii])==ZERO )
        {
            temp_in_Sensor4[Ii]=0;            }
        else
        {
            temp_in_Sensor4[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(in_Sensor5);Ii++)
    {
        if( INPUT_STATE(in_Sensor5[Ii])==ZERO )
        {
            temp_in_Sensor5[Ii]=0;            }
        else
        {
            temp_in_Sensor5[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(in_Global_Clock);Ii++)
    {
        if( INPUT_STATE(in_Global_Clock[Ii])==ZERO )
        {
            temp_in_Global_Clock[Ii]=0;            }
        else
        {
            temp_in_Global_Clock[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(in_Clk);Ii++)
    {
        if( INPUT_STATE(in_Clk[Ii])==ZERO )
        {
            temp_in_Clk[Ii]=0;            }
        else
        {
            temp_in_Clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(in_RST);Ii++)
    {
        if( INPUT_STATE(in_RST[Ii])==ZERO )
        {
            temp_in_RST[Ii]=0;            }
        else
        {
            temp_in_RST[Ii]=1;
        }
            }
	foorfasic43_9(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(out_Light);Ii++)
    {
        if(temp_out_Light[Ii]==0)
        {
            _op_out_Light[Ii]=ZERO;
            }
        else if(temp_out_Light[Ii]==1)
        {
            _op_out_Light[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(out_Light[Ii]) = _op_out_Light[Ii];
            }
        else if(_op_out_Light[Ii] != _op_out_Light_old[Ii])
        {
            OUTPUT_STATE(out_Light[Ii]) = _op_out_Light[Ii];
            OUTPUT_DELAY(out_Light[Ii]) = ((_op_out_Light[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(out_Light[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(out_Light[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(out_Tx_Serial);Ii++)
    {
        if(temp_out_Tx_Serial[Ii]==0)
        {
            _op_out_Tx_Serial[Ii]=ZERO;
            }
        else if(temp_out_Tx_Serial[Ii]==1)
        {
            _op_out_Tx_Serial[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(out_Tx_Serial[Ii]) = _op_out_Tx_Serial[Ii];
            }
        else if(_op_out_Tx_Serial[Ii] != _op_out_Tx_Serial_old[Ii])
        {
            OUTPUT_STATE(out_Tx_Serial[Ii]) = _op_out_Tx_Serial[Ii];
            OUTPUT_DELAY(out_Tx_Serial[Ii]) = ((_op_out_Tx_Serial[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(out_Tx_Serial[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(out_Tx_Serial[Ii]) = STRONG;
    }

}