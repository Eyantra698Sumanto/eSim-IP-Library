/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vwallacemul66.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_A[1024];
        extern "C" int port_A;
        extern "C" int temp_B[1024];
        extern "C" int port_B;
        extern "C" int temp_prod[1024];
        extern "C" int port_prod;
        extern "C" int foowallacemul66(int,int);
        
        void int2arrwallacemul66(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intwallacemul66(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int foowallacemul66(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vwallacemul66* wallacemul66[1024];
            count--;
            if (init==0)
            {
                wallacemul66[count]=new Vwallacemul66{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============wallacemul66 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("A=%d\n", wallacemul66[count] ->A);
				printf("B=%d\n", wallacemul66[count] ->B);
				printf("prod=%d\n", wallacemul66[count] ->prod);
				wallacemul66[count]->A = arr2intwallacemul66(temp_A, port_A);
				wallacemul66[count]->B = arr2intwallacemul66(temp_B, port_B);
				wallacemul66[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("A=%d\n", wallacemul66[count] ->A);
				printf("B=%d\n", wallacemul66[count] ->B);
				printf("prod=%d\n", wallacemul66[count] ->prod);
				int2arrwallacemul66(wallacemul66[count] -> prod, temp_prod, port_prod);

            }
            return 0;
        }