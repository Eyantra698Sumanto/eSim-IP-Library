/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vfullsub32.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_X[1024];
        extern "C" int port_X;
        extern "C" int temp_Y[1024];
        extern "C" int port_Y;
        extern "C" int temp_Z[1024];
        extern "C" int port_Z;
        extern "C" int temp_D[1024];
        extern "C" int port_D;
        extern "C" int temp_B[1024];
        extern "C" int port_B;
        extern "C" int foofullsub32(int,int);
        
        void int2arrfullsub32(int  num, int array[], int n)
        {
            for (int i = 0; i < n && num>=0; i++)
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intfullsub32(int array[],int n)
        {
            int i,k=0;
            for (i = 0; i < n; i++)
                k = 2 * k + array[i];
            return k;
        }
        
        int foofullsub32(int init,int count)
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vfullsub32* fullsub32[1024];
            count--;
            if (init==0)
            {
                fullsub32[count]=new Vfullsub32{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============fullsub32 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("X=%d\n", fullsub32[count] ->X);
				printf("Y=%d\n", fullsub32[count] ->Y);
				printf("Z=%d\n", fullsub32[count] ->Z);
				printf("D=%d\n", fullsub32[count] ->D);
				printf("B=%d\n", fullsub32[count] ->B);
				fullsub32[count]->X = arr2intfullsub32(temp_X, port_X);
				fullsub32[count]->Y = arr2intfullsub32(temp_Y, port_Y);
				fullsub32[count]->Z = arr2intfullsub32(temp_Z, port_Z);
				fullsub32[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("X=%d\n", fullsub32[count] ->X);
				printf("Y=%d\n", fullsub32[count] ->Y);
				printf("Z=%d\n", fullsub32[count] ->Z);
				printf("D=%d\n", fullsub32[count] ->D);
				printf("B=%d\n", fullsub32[count] ->B);
				int2arrfullsub32(fullsub32[count] -> D, temp_D, port_D);
				int2arrfullsub32(fullsub32[count] -> B, temp_B, port_B);

            }
            return 0;
        }